package edu.uno.ai.sat.ex;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import edu.uno.ai.sat.Assignment;
import edu.uno.ai.sat.Literal;
import edu.uno.ai.sat.Solver;
import edu.uno.ai.sat.SolverStats;
import edu.uno.ai.sat.Variable;

public class Smosely extends Solver {

    public Smosely() {
		super("smosely1");
		// TODO Auto-generated constructor stub
	}

	@Override
    public boolean solve(Assignment assignment) {
        int numIterations = 0;
        while(true) {
            // Check if numIterations exceeds the operation limit
            if(Solver.operations >= 100000) {
                return false;
            }
            long startTime;
			// Check if 5 minutes of real world time have passed
            if(System.currentTimeMillis() - startTime >= 300000) {
                return false;
            }
            List<Literal> unsatisfied = getUnsatisfied(assignment);
            // If all literals are satisfied, return true
            if(unsatisfied.size() == 0) {
                return true;
            }
            Literal literal = chooseLiteral(unsatisfied);
            if(literal == null) {
                return false;
            }
            // Check if the literal is positive or negative
            Variable variable = literal.variable;
            if(literal.positive) {
                variable.setValue(true, assignment);
            } else {
                variable.setValue(false, assignment);
            }
            numIterations++;
        }
    }

    private List<Literal> getUnsatisfied(Assignment assignment) {
        // Return a list of unsatisfied literals
        List<Literal> unsatisfied = new ArrayList<>();
        for(List<Literal> clause : this.clauses) {
            boolean satisfied = false;
            for(Literal literal : clause) {
                if(literal.evaluate(assignment)) {
                    satisfied = true;
                    break;
                }
            }
            if(!satisfied) {
                for(Literal literal : clause) {
                    unsatisfied.add(literal);
                }
            }
        }
        return unsatisfied;
    }

    private Literal chooseLiteral(List<Literal> literals) {
        // Choose a literal to assign a truth value to
        // There are multiple ways you can implement this, but a simple one is to choose the literal that appears most often
        HashMap<Variable, Integer> frequencyMap = new HashMap<>();
        for(Literal literal : literals) {
            if(frequencyMap.containsKey(literal.variable)) {
                frequencyMap.put(literal.variable, frequencyMap.get(literal.variable) + 1);
            } else {
                frequencyMap.put(literal.variable, 1);
            }
        }
        Variable maxVariable = null;
        int maxFrequency = 0;
        for(Variable variable : frequencyMap.keySet()) {
            if(frequencyMap.get(variable) > maxFrequency) {
                maxVariable = variable;
                maxFrequency = frequencyMap.get(variable);
            }
        }
        if(maxVariable == null) {
            return null;
        }
        List<Literal> maxLiterals = new ArrayList<>();
        List<Literal> minLiterals = new ArrayList<>();
        for(Literal literal : literals) {
            if(literal.variable.equals(maxVariable)) {
                maxLiterals.add(literal);
            } else {
                minLiterals.add(literal);
            }
        }
        if(maxLiterals.size() >= minLiterals.size()) {
            return maxLiterals.get(0);
        } else {
            return new Literal(maxVariable, !maxLiterals.get(0).positive);
        }
    }
}
