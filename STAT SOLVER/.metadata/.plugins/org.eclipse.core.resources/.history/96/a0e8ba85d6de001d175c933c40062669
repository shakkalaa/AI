package edu.uno.ai.sat.ex;

import java.util.*;

import edu.uno.ai.sat.*;
import edu.uno.ai.util.ImmutableArray;


/**
 * 
 * @author 
 */
public class Smosely extends Solver {
	
	//random number generator 
	private final Random random = new Random(0);
	//noise factor
	private final double noise = 0.5;

    public Smosely(){
        super("My Solver");
    }

    @Override
    public boolean solve(Assignment assignment){
    	
    	//Give start value
    	for(Variable variable : assignment.problem.variables) {
    		boolean value = random.nextBoolean();
    			assignment.setValue(variable, value);
    	}
    	
    	//If solved then return true
    	if(){
    		return true;
    	}
    	
    	//while not solved
    	while(!true) {
    	
    		//generate random number boolean from 0-1
    		double randomNum = random.nextDouble();
    		Literal bestLiteral = null;
    		//find unsolved clause
    		//for each clause in problem
    		for(Clause clause: assignment.problem.clauses) {
    			
    			//if clause = False
    			if(clause.equals(Value.FALSE)) {
    			//return clause;
    				
    			}	
    			//if random < noise
    			if(randomNum < noise) {
    				
    				//pick a random literal in that clause
    				//flip it
    	
    			//else
    			}else {
    				//for each literal in clause
    				for(Literal literal : clause.literals) {
    					
    					flipValue(assignment, literal);
    					
    					
    					
    					//count # of true clause
    					int max = 0;
    					int trueClause = assignment.countTrueClauses();
    					
    					//keep best one
    					if(trueClause > max) {
    						max = trueClause;
    						bestLiteral = literal;
    					}
    					
    					flipValue(assignment, literal);

    				}	
    				
    		    	//permenatly flip 
					assignment.setValue(bestLiteral.variable, flipValue(assignment, bestLiteral));
    			}
    			
    			
    		}	
    	}    	
    		
			return false;
    		
    		
    }
    
    public Value flipValue(Assignment assignment, Literal literal) {

    	if(assignment.getValue(literal) == Value.FALSE) {
			
			assignment.setValue(literal.variable, Value.TRUE);
			
		}else {
			assignment.setValue(literal.variable, Value.FALSE);
		}
		return null;
    }
    

 
}	