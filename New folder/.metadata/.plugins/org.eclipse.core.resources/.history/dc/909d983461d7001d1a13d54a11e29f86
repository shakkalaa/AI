package edu.uno.ai.sat.ex;

import java.util.*;

import edu.uno.ai.logic.Formula;
import edu.uno.ai.sat.*;
import edu.uno.ai.util.ImmutableArray;

/**
 * 
 * @author 
 */
public class Smosely extends Solver {

	//private final Random random = new Random(0);
	//private int maxOperations;
    private long startTime;
	//private Formula formula;
	
	/**
	 * Constructs a new random SAT solver. You should change the string below
	 * from "random" to your ID. You should also change the name of this class.
	 * In Eclipse, you can do that easily by right-clicking on this file
	 * (RandomAgent.java) in the Package Explorer and choosing Refactor > Rename.
	 */
	public Smosely() {
		super("My Solver");
		//this.maxOperations = 1000000;
        this.startTime = System.currentTimeMillis();
	}


	@Override
    public boolean solve(Assignment assignment) {
		
		// TODO Auto-generated method stub
		if(assignment.problem.variables.size() == 0){
			return assignment.getValue() == Value.TRUE;
		}else {
			initalize(assignment);
			
			if(assignment.isComplete()) {
				return true;
			}
		
		
			Variable variable = chooseVariable(assignment);
		
			for(Value value : Value.values()) {
			
				assignment.setValue(variable, value);
			
				simplify(assignment);
			
			
				if(solve(assignment)) {
					return true;
				}
			
				assignment.unsetValue(variable);
				backtrack(assignment);
			}
		}	
		return false;
	}


	
	private void simplify(Assignment assignment) {
		// TODO Auto-generated method stub
		Assignment simplified = assignment.clone();
		
		// Perform unit propagation.
        boolean unitPropagated = true;
        while (unitPropagated) {
            unitPropagated = false;

            for (Clause clause : simplified.problem.clauses) {
            	
                if (clause.literals.size() == 1) {
                	//Iterator<Variable> iterator = ((Iterable<Variable>) clause).iterator();
                    
                	Variable variable = clause.literals.get(0).variable;
              
                    Value value = simplified.getValue(variable) == Value.TRUE ? Value.FALSE : Value.TRUE;
                    
                    if (simplified.getValue(variable) == Value.UNKNOWN) {
                    	simplified.setValue(variable, value);
                    	unitPropagated = true;
                       
                    } else if (simplified.getValue(variable) != value) {
                    	//simplifiedAssignment.setValue(variable, Value.FALSE);
                    	return null;
                    			//simplifiedAssignment;
                    }
                    
                }
            }
        }
	}


	private void initalize(Assignment assignment) {
		// TODO Auto-generated method stub
		for(int i = 0; i < assignment.problem.clauses.size(); i++) {
			
			for(Variable variable : assignment.problem.clauses.get(i).variables) {
				
				if(assignment.getValue(variable) ==  Value.UNKNOWN) {
					
					if(assignment.problem.clauses.get(i).isPositive(variable)) {
						assignment.setValue(variable, Value.TRUE);
						
					}else {
						assignment.setValue(variable, Value.FALSE);
					}
				}
			}	
		}
	}


	private final Variable chooseVariable(Assignment assignment) {
		ArrayList<Variable> unassign = new ArrayList<Variable>();

		int maxOccurrence = -1;
		
		for(Variable variable : assignment.problem.variables) {
			if(assignment.getValue(variable) == Value.UNKNOWN) {
				
				int occurrence = countOccurrences(assignment, variable);
				
				if(occurrence > maxOccurrence) {
					
					maxOccurrence = occurrence;
					unassign.clear();
				}
				
				if(occurrence == maxOccurrence) {
					unassign.add(variable);
				}
			}
		}
		
		return unassign.get(random.nextInt(unassign.size()));
	}
	
	private int countOccurrences(Assignment assignment, Variable variable) {
		
		int count = 0;
		
		for(int i = 0; i < assignment.problem.clauses.size(); i++) {
			if(assignment.problem.clauses.get(i).contains(variable)) {
				count++;
			}
		}
		return count;
	}
}
