package edu.uno.ai.sat.ex;

import java.util.*;

import edu.uno.ai.sat.*;
import edu.uno.ai.util.ImmutableArray;


/**
 * 
 * @author 
 */
public class Smosely extends Solver {
	
	private final Random random = new Random(0);

    public Smosely(){
        super("My Solver");
    }

    @Override
    public boolean solve(Assignment assignment){
    	
         //Perform unit propagation
    	
    	
    		unitPropAndPureLiteral(assignment);
        	// Perform pure literal elimination
    		
        	// Choose a variable whose value will be set using a heuristic
    		Variable chosen = chooseVariable(assignment);
        	// Choose 'true' or 'false' for the variable using a heuristic
    		
        	// Assign the chosen value to the chosen variable.
    		tryValue(assignment, chosen, Value.TRUE);
    		if(solve(assignment)) {
    			return true;
    		}
    		tryValue(assignment, chosen, Value.FALSE);
    		if(solve(assignment)){
    			return true;
    		}
    		
    		
    }
    

    public boolean unitPropAndPureLiteral(Assignment assignment) {
        // If the problem has no variables, it is trivially true or false.
        if (assignment.problem.variables.size() == 0) {
            return assignment.getValue() == Value.TRUE;
        } else {
            // Get all the variables in the problem.
            ImmutableArray<Variable> variables = assignment.problem.variables;

            // Keep trying until the assignment is satisfying.
            // Perform unit propagation and pure literal elimination.
            boolean unitPropagation = false;
            for (Variable variable : variables) {
                // Check if the variable appears in any clause.
                boolean variableAppearsInClause = false;
                for (Clause clause : assignment.problem.clauses) {
                    if (clause.literals.contains(variable)) {
                        variableAppearsInClause = true;
                        break;
                    }
                }
                if (!variableAppearsInClause) {
                    // If the variable doesn't appear in any clause, set it to either TRUE or FALSE.
                    tryValue(assignment, variable, Value.TRUE);
                    unitPropagation = true;
                    continue;
                }

                // Perform pure literal elimination.
                boolean positive = false;
                boolean negative = false;
                for (Clause clause : assignment.problem.clauses) {
                    if (clause.literals.contains(variable)) {
                        if (assignment.getValue(clause) == Value.UNKNOWN) {
                            if (variable.equals(Value.TRUE)) {
                                positive = true;
                            } else if (variable.equals(Value.FALSE)) {
                                negative = true;
                            }
                        }
                    }
                }
                if (positive && !negative) {
                    tryValue(assignment, variable, Value.TRUE);
                } else if (negative && !positive) {
                    tryValue(assignment, variable, Value.FALSE);
                }

                // Perform unit propagation.
                for (Clause clause : assignment.problem.clauses) {
                    if (assignment.getValue(clause) == Value.UNKNOWN && assignment.countUnknownLiterals(clause) == 1) {
                        Literal unknown = null;
                        for (Literal literal : clause.literals) {
                            if (assignment.getValue(literal) == Value.UNKNOWN) {
                                if (unknown == null) {
                                    unknown = literal;
                                } else {
                                    unknown = null;
                                    break;
                                }
                            }
                        }
                        if (unknown != null) {
                            assignment.setValue(unknown.variable, Value.TRUE);
                            unitPropagation = true;
                        }
                    }
                }
            }
            return unitPropagation;
        }
    }

    
    private final Variable chooseVariable(Assignment assignment) {
		// This list will hold all variables whose current value is 'unknown.'
		ArrayList<Variable> unknown = new ArrayList<>();
		// Loop through all the variables in the problem and find ones whose
		// current value is 'unknown.'
		for(Variable variable : assignment.problem.variables) {
			if(assignment.getValue(variable) == Value.UNKNOWN) {
				unknown.add(variable);
			}
		}
		// If any variables are 'unknown,' choose one of them randomly.
		//Variable randomVar;
		if(unknown.size() > 0) {
			return unknown.get(random.nextInt(unknown.size()));
		// Otherwise, choose any variable from the problem at random.
		}else {
			return assignment.problem.variables.get(random.nextInt(assignment.problem.variables.size()));
		}
		
		
	}
    
   /*private final Value chooseValue(Variable variable, Assignment assignment) {
		int trueCount = 0;
		int falseCount = 0;
		for (int i = 0; i < variable.problem.clauses.size(); i++) {
			Value value = assignment.getValue(variable.problem.clauses.get(i));
			if (value == Value.TRUE) {
				trueCount++;
			} else if (value == Value.FALSE) {
				falseCount++;
			}
		}
	
		if (trueCount > falseCount) {
			return Value.FALSE;
		} else if (falseCount > trueCount) {
			return Value.TRUE;
		} else {
			return random.nextBoolean() ? Value.TRUE : Value.FALSE;
		}
	}*/
  //Set a variable to a value, and if it doesn’t work, undo it.
    private boolean tryValue(Assignment a, Variable var, Value val){
    	//Back up the variable’s current value.
        Value backup = a.getValue(var);
        //Set the variable to the given value.
        a.setValue(var, val);
        //Try to solve the problem with this new information.
        if(solve(a)){
            return true;
        }
        //If we failed to solve the problem, return the variable to its previous value.
        else{
        	a.setValue(var, backup);
        	return false;
        }
    }
}	