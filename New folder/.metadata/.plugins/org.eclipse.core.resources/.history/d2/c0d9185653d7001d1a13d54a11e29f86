package edu.uno.ai.sat.ex;

import java.util.*;

import edu.uno.ai.logic.Formula;
import edu.uno.ai.sat.*;
import edu.uno.ai.util.ImmutableArray;

/**
 * 
 * @author 
 */
public class Smosely extends Solver {

	//private final Random random = new Random(0);
	//private int maxOperations;
    private long startTime;
	//private Formula formula;
	
	/**
	 * Constructs a new random SAT solver. You should change the string below
	 * from "random" to your ID. You should also change the name of this class.
	 * In Eclipse, you can do that easily by right-clicking on this file
	 * (RandomAgent.java) in the Package Explorer and choosing Refactor > Rename.
	 */
	public Smosely() {
		super("My Solver");
		//this.maxOperations = 1000000;
        this.startTime = System.currentTimeMillis();
	}


	@Override
    public boolean solve(Assignment assignment) {
		
		return resolve(assignment, (List<Variable>) assignment.problem.variables);
    }
	
	
	private boolean resolve(Assignment assignment, List<Variable> variables) {
		// TODO Auto-generated method stub
		if(variables.isEmpty()){
			return assignment.getValue() == Value.TRUE;
		}
		
		Variable variable = null;
		int minValueCount = Integer.MAX_VALUE;
		for(Variable var : variables) {
			if(assignment.getValue(var) == Value.UNKNOWN) {
				int valueCount = getValueCount(var);
				
				if(valueCount < minValueCount) {
					minValueCount = valueCount;
					variable = var;
				}
			}
		}
		
		if(variable == null){
			return assignment.getValue() == Value.TRUE;
		}
		
		assignment.setValue(variable, Value.TRUE);
		
		if(resolve(assignment, variables)) {
			return true;
		}
		
		assignment.setValue(variable, Value.FALSE);
		
		if(resolve(assignment, variables)) {
			return true;
		}
		
		assignment.unassign(variable);
		return false;
	}


	
	private final Variable chooseVariable(Assignment assignment) {
		Variable chosenVariable = null;
		int minRemaining = Integer.MAX_VALUE;
		
		for(Variable variable : assignment.problem.variables) {
			if(assignment.getValue(variable) == Value.UNKNOWN) {
				
				ImmutableArray<Value> possibleValues = variable.domain();
				int remainingValues = possibleValues.size();
				
				if(remainingValues < minRemaining) {
					
					chosenVariable = variable;
					minRemaining = remainingValues;
				}
			}
		}
		
		return chosenVariable;
	}
	
	public int getValueCount(Variable variable) {
		int count = 0;
		
		for(Value value : variable.getDomain().getValues()) {
			count++;
		}
		return count;
	}
}
